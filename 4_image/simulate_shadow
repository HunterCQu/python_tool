import numpy as np
import math
import cv2
import os

def create_polygon_mask(image_shape, points):
    """
    Creates a binary mask with a filled polygon based on a list of points.
    
    Parameters:
    image_shape (tuple): Shape of the image (height, width, channels).
    points (list): List of (x, y) tuples for polygon vertices.
    
    Returns:
    numpy.ndarray: Binary mask with the polygon filled.
    """
    mask = np.zeros(image_shape[:2], dtype=np.uint8)
    cv2.fillPoly(mask, [np.array(points, dtype=np.int32)], 255)
    return mask

def darken_spot(image):
    """
    Darkens a circular region randomly chosen within the image, constrained by a polygon mask.
    
    Parameters:
    image (numpy.ndarray): Input image.
    
    Returns:
    numpy.ndarray: Image with darkened spot.
    """
    height, width, _ = image.shape  # Get image dimensions
    radius = np.random.randint(40, min(height, width) // 1.5)  # Random radius, ensuring it is less than a third of the minimum dimension
    
    # Ensure the center of the circle is within valid bounds considering the radius
    pos_x = np.random.randint(radius, width - radius)
    pos_y = np.random.randint(radius, height - radius)
    
    strength = np.random.randint(90, 120)

    # Define polygon points (as an example; modify as needed)
    polygon_points = [
        (pos_x - radius, pos_y - radius), 
        (pos_x + radius, pos_y - radius), 
        (pos_x + radius, pos_y + radius), 
        (pos_x - radius, pos_y + radius)
    ]
    
    # Create the polygon mask
    mask = create_polygon_mask(image.shape, polygon_points)
    
    for j in range(max(0, pos_y - radius), min(height, pos_y + radius)):
        for i in range(max(0, pos_x - radius), min(width, pos_x + radius)):
            if mask[j, i] == 255:  # Check if inside the mask
                distance = math.sqrt((pos_x - i) ** 2 + (pos_y - j) ** 2)
                if distance < radius:
                    result = (1 - distance / radius) * strength
                    image[j, i, 0] = max(image[j, i, 0] - result, 0)
                    image[j, i, 1] = max(image[j, i, 1] - result, 0)
                    image[j, i, 2] = max(image[j, i, 2] - result, 0)
    
    image = image.astype(np.uint8)
    return image

def process_image(image_path, output_folder, max_retries=5):
    """
    Processes a single image, retrying if errors occur.
    
    Parameters:
    image_path (str): Path to the input image.
    output_folder (str): Folder where the processed image will be saved.
    max_retries (int): Maximum number of retries if an error occurs.
    """
    base_name = os.path.basename(image_path)
    output_filename = f"{base_name}"
    output_path = os.path.join(output_folder, output_filename)
    
    for attempt in range(max_retries):
        try:
            # Load the image
            image = cv2.imread(image_path)
            if image is None:
                raise ValueError(f"Error loading image: {image_path}.")
            
            # Convert BGR to RGB for correct color display
            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            darkened_image = darken_spot(image.copy())
            
            # Save the processed image
            cv2.imwrite(output_path, cv2.cvtColor(darkened_image, cv2.COLOR_RGB2BGR))  # Convert back to BGR for saving
            print(f'Saved: {output_path}')
            break
        
        except Exception as e:
            print(f"Error processing image {image_path} on attempt {attempt + 1}: {e}")
            if attempt == max_retries - 1:
                print(f"Failed to process image {image_path} after {max_retries} attempts.")
                
def process_images(input_file, output_folder):
    """
    Processes images listed in a text file and saves the results to a specified folder.
    
    Parameters:
    input_file (str): Path to the text file containing image paths.
    output_folder (str): Folder where processed images will be saved.
    """
    # Create output folder if it doesn't exist
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    # Read image paths from the text file
    with open(input_file, 'r') as file:
        image_paths = file.readlines()

    for image_path in image_paths:
        image_path = image_path.strip()  # Remove any leading/trailing whitespace
        if image_path:
            process_image(image_path, output_folder)

# Example usage
input_file = '/home/hunter/python_tools/brighter.txt'  # Path to the text file with image paths
output_folder = '/home/hunter/python_tools/brighter_images'  # Folder to save processed images
process_images(input_file, output_folder)
